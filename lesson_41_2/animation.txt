- Анимации в вебе — это способ создания плавных визуальных изменений элементов на веб-странице. Они помогают сделать интерфейс более динамичным, улучшить пользовательский опыт и привлечь внимание к важным деталям.

css:
@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

.box {
  animation: fadeIn 1s ease-in-out;
}

js:
const box = document.querySelector('.box');
let position = 0;

function animate() {
  position += 1;
  box.style.transform = `translateX(${position}px)`;
  if (position < 200) requestAnimationFrame(animate);
}

animate();

svg:
path {
  stroke-dasharray: 300;
  stroke-dashoffset: 300;
  animation: draw 2s linear forwards;
}

@keyframes draw {
  to { stroke-dashoffset: 0; }
}

Подход	Преимущества	Недостатки
CSS-анимации
✅ Простота использования (без JS).
✅ Хорошая производительность, т.к. браузер оптимизирует рендеринг.
✅ Поддержка аппаратного ускорения (GPU) для transform и opacity.
✅ Можно легко использовать с hover, focus и другими псевдоклассами.
❌ Ограниченные возможности (сложные последовательные анимации трудно реализовать).
❌ Плохой контроль в реальном времени (нельзя динамически изменять параметры на лету, как в JS).
❌ Трудно синхронизировать несколько анимаций.
JavaScript-анимации
✅ Гибкость (можно анимировать что угодно, включая SVG, Canvas, WebGL).
✅ Отличный контроль (можно динамически изменять свойства и останавливать анимации).
✅ Работает во всех браузерах (при правильном подходе).
✅ Можно использовать популярные библиотеки (GSAP, anime.js).
❌ Требует больше кода, чем CSS-анимации.
❌ Менее оптимизировано (JS-анимации без requestAnimationFrame могут нагружать CPU).
❌ Сложнее отлаживать и поддерживать, чем CSS-анимации.
SVG-анимации
✅ Идеально для векторной графики, анимации иконок и иллюстраций.
✅ Высокая четкость на любых экранах (векторный формат).
✅ Можно анимировать через CSS, JS или SMIL (SVG-анимации).
✅ Поддержка сложных эффектов (линии, маски, градиенты).
❌ Плохо поддерживается в старых браузерах (например, SMIL-анимации).
❌ Может быть сложнее в настройке и управлении, чем CSS и JS-анимации.
❌ Не всегда оптимально для сложных сцен (лучше использовать Canvas/WebGL).