1. Какие обязательные теги должны быть в базовой HTML-странице?
  <!DOCTYPE html> — указывает на версию HTML5.
  <html> — корневой элемент страницы.
  <head> — содержит метаинформацию о странице.
  <meta charset="UTF-8"> — поддержка русского языка и других символов.
  <title> — заголовок страницы (отображается на вкладке браузера).
  <body> — основное содержимое страницы.

2. Какие существуют способы подключения CSS к HTML-документу?
Внешний файл (.css) (рекомендуемый способ)
<link rel="stylesheet" href="styles.css">
Встроенные стили (<style> в <head>)
<style>
  body { background-color: lightgray; }
</style>
Внутренние стили (атрибут style)
<p style="color: red;">Красный текст</p>

3. Как работает Flexbox и какие основные свойства используются для управления элементами?
Flexbox — это система для расположения элементов в строку (row) или колонку (column).
Основные свойства:

    display: flex; — включает Flexbox.
    flex-direction: row | column; — задает направление.
    justify-content: flex-start | center | space-between; — выравнивает элементы по горизонтали.
    align-items: flex-start | center | stretch; — выравнивает элементы по вертикали.
    flex-wrap: wrap; — разрешает перенос элементов на новую строку.

Пример:

.container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
}

4. Как работает система сетки (Grid) в Bootstrap и какие классы используются для создания адаптивного макета?

    Bootstrap использует 12-колоночную систему сетки.
    Основные классы:
        .container — ограниченный контейнер.
        .row — строка для размещения колонок.
        .col-md-6 — колонка, занимающая 6 из 12 доступных колонок на экранах md и выше.

Пример использования Bootstrap Grid:

<div class="container">
    <div class="row">
        <div class="col-md-6">Колонка 1</div>
        <div class="col-md-6">Колонка 2</div>
    </div>
</div>

5. Как работает концепция utility-классов в Tailwind CSS?

    Utility-классы — это небольшие классы, отвечающие за конкретные стили, например:
        text-xl — увеличивает размер текста.
        bg-blue-500 — делает фон синим.
        p-4 — добавляет отступ в 16px.

Пример использования:

<button class="bg-blue-500 text-white px-4 py-2 rounded-lg">
    Кнопка
</button>

6. Как работают переменные в SASS/SCSS, и какие у них преимущества?

    Переменные позволяют сохранять значения, такие как цвета, шрифты и отступы, и повторно использовать их в стилях.
    Пример:

$primary-color: #3498db;
$font-size: 16px;

body {
  color: $primary-color;
  font-size: $font-size;
}

Преимущества:

    Упрощает изменение стилей
    Исключает дублирование кода
    Повышает читаемость и поддержку кода

7. Как работает свойство transition, и какие параметры оно принимает?

    transition задает плавные изменения CSS-свойств за определенное время.
    Синтаксис:

transition: [свойство] [длительность] [функция сглаживания] [задержка];

Пример:

.button {
  background-color: red;
  transition: background-color 0.5s ease-in-out, transform 0.3s linear;
}

.button:hover {
  background-color: blue;
  transform: scale(1.2);
}

Параметры:

    Свойство (background-color, opacity, transform и т. д.)
    Длительность (0.5s, 2s)
    Функция сглаживания (ease, linear, ease-in-out)
    Задержка (необязательный параметр, например 0.2s)

8. Как использовать CSS-атрибут prefers-color-scheme для автоматического определения темы?

@media (prefers-color-scheme: dark) {
  body {
    background-color: #121212;
    color: #ffffff;
  }
}

@media (prefers-color-scheme: light) {
  body {
    background-color: black;
    color: white
  }
}

    Этот код автоматически применяет темную тему, если у пользователя включена темная тема в системе.

9. Как использовать теорию цвета и типографику при создании дизайна?

    Использовать цветовые схемы (монохромные, аналоговые, комплементарные).
    Применять контрастные цвета для удобного восприятия.
    Ограничивать количество используемых шрифтов (1-2 основных).
    Использовать удобочитаемые размеры текста и иерархию заголовков.

10. Какие операторы используются в JavaScript и как они работают?
 1 = '1'
 1 = '1'
    Арифметические (+, -, *, /, %, **)
    Сравнения (==, ===, !=, !==, >, <, >=, <=)
    Логические (&&, ||, !)
    Присваивания (=, +=, -=, *=, /=, %=)
    Тернарный (условие ? значение1 : значение2)

let result = 10 > 5 ? "Больше" : "Меньше"; // "Больше"

11. Какие бывают циклы в JavaScript и чем они отличаются?

    for – используется, когда известно количество итераций.
    while – выполняется, пока истинно условие.
    do...while – выполняется хотя бы один раз, затем проверяет условие.

for (let i = 0; i < 5; i++) {
    console.log(i); // 0, 1, 2, 3, 4
}

let j = 0;
while (j < 3) {
    console.log(j); // 0, 1, 2
    j++;
}

let k = 0;
do {
    console.log(k); // 0
    k++;
} while (k < 1);

12. Как получить доступ к элементам HTML через JavaScript?

    document.getElementById("id") – поиск элемента по id.
    document.querySelector(".class") – поиск по классу или селектору.
    document.querySelectorAll("tag") – получение списка элементов.

Примеры:

let header = document.getElementById("title"); // Получаем элемент с id="title"
let button = document.querySelector(".btn"); // Получаем первый элемент с классом "btn"
let paragraphs = document.querySelectorAll("p"); // Получаем все <p>

13. Какие особенности у Set и как он отличается от массива?

    Set хранит только уникальные значения.
    В отличие от массива, Set не поддерживает индексы.
    Set можно итерировать с помощью forEach, for...of.

Пример использования Set:

let numbers = new Set([1, 2, 3, 3, 4, 4, 5]);
console.log(numbers); // Set(5) {1, 2, 3, 4, 5}

numbers.add(6); // Добавляем значение
numbers.delete(2); // Удаляем 2
console.log(numbers.has(3)); // true

14. Как работает наследование в JavaScript-классах?

    Класс может наследовать свойства и методы другого класса с помощью extends.
    Конструктор дочернего класса должен вызывать super(), если он переопределяет конструктор родителя.

Пример наследования:

class Animal {
    constructor(name) {
        this.name = name;
    }

    speak() {
        console.log(`${this.name} издает звук`);
    }
}

class Dog extends Animal {
    speak() {
        console.log(`${this.name} лает`);
    }
}

let dog = new Dog("Шарик");
dog.speak(); // "Шарик лает"

15. Как работают Callbacks в JavaScript?

    Callback (обратный вызов) — это функция, переданная как аргумент в другую функцию, которая вызывается после завершения операции.
    Использование callback-функций — старый способ обработки асинхронности.


    (number, () => {
      console.log(a);
    })

Пример Callbacks:

function fetchData(callback) {
    setTimeout(() => {
        console.log("Данные загружены");
        callback(); // Вызываем переданный callback
    }, 2000);
}

fetchData(() => {
    console.log("Обработка данных");
});

Минус Callbacks — Callback Hell (Ад Коллбэков), когда код становится нечитаемым:

getUser(userId, function(user) {
    getOrders(user, function(orders) {
        getOrderDetails(orders[0], function(details) {
            console.log(details);
        });
    });
});

16. Как устроена модель "Запрос-Ответ" (Request-Response) в HTTP?

Каждый запрос состоит из:

    URL (Uniform Resource Locator) – адрес ресурса (https://api.example.com/users)
    Метод HTTP (GET, POST, PUT, DELETE)
    Заголовки (Headers) – содержат метаданные (например, Content-Type: application/json)
    Тело запроса (Body) – данные, отправляемые на сервер (для POST, PUT)

Ответ от сервера состоит из:

    Код состояния (Status Code):
        200 OK – успешно
        404 Not Found – ресурс не найден
        500 Internal Server Error – ошибка на сервере
    Заголовки (Headers) – метаданные ответа
    Тело (Body) – переданные данные

Пример ответа сервера:

{
  "status": "success",
  "message": "Данные получены!"
}

17. Какие основные принципы REST API?

REST API строится на 6 основных принципах:

    Клиент-серверная архитектура – разделение клиента и сервера.
    Отсутствие состояния (Stateless) – сервер не хранит информацию о клиенте между запросами.
    Кэширование – запросы могут кэшироваться для уменьшения нагрузки.
    Единообразие интерфейса (Uniform Interface) – единые принципы взаимодействия (например, GET /users всегда получает список пользователей).
    Многоуровневая система (Layered System) – API может состоять из нескольких слоев (например, сервер + база данных).
    Код по требованию (Code on Demand, необязательный) – API может отправлять клиенту исполняемый код (например, JavaScript).

18. Как управлять анимацией по X и Y осям в JavaScript?

Анимация по X и Y осям выполняется с помощью transform: translate(x, y).

Пример передвижения блока влево и вниз:

const box = document.getElementById("box");
let x = 0, y = 0;

function moveBox() {
    x += 5;
    y += 3;
    box.style.transform = `translate(${x}px, ${y}px)`;
    requestAnimationFrame(moveBox);
}

moveBox();

📌 Варианты анимации:

    translateX(50px) – движение по оси X.
    translateY(50px) – движение по оси Y.
    rotate(45deg) – поворот.
    scale(1.5) – увеличение.