1. Какие основные атрибуты можно задать для <input> и <button>?
  Для <input>:
    type — определяет тип ввода (text, password, email, number, checkbox и т. д.).
    placeholder — текст-подсказка внутри поля.
    value — предустановленное значение.
    required — делает поле обязательным.
    disabled — делает поле неактивным.
    readonly — запрещает редактирование.
  Для <button>:
      type — submit, reset, button (по умолчанию).
      disabled — делает кнопку неактивной.
      onclick — обработчик события при нажатии.

2. Какие существуют способы центрирования элементов в CSS?
Горизонтальное центрирование текста:

text-align: center;

Центрирование блока по горизонтали:

margin: 0 auto;
width: 50%;

Центрирование по вертикали и горизонтали (Flexbox):

display: flex;
justify-content: center;
align-items: center;
height: 100vh;

Центрирование с position: absolute:

position: absolute;
top: 50%;
left: 50%;
transform: translate(-50%, -50%);

3. Какие свойства отвечают за выравнивание элементов в grid?

    justify-items: start | center | end; — выравнивает содержимое ячеек по горизонтали.
    align-items: start | center | end; — выравнивает содержимое ячеек по вертикали.
    justify-content: center; — выравнивает всю сетку по горизонтали.
    align-content: center; — выравнивает всю сетку по вертикали.

Пример:

.grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    justify-items: center;
    align-items: center;
}

4. Как добавить карусель Bootstrap на страницу и какие атрибуты используются для управления ее поведением?

    Используется компонент carousel.
    Основные атрибуты:
        data-bs-ride="carousel" — автозапуск.
        data-bs-interval="3000" — интервал смены слайдов.

Пример:

<div id="carouselExample" class="carousel slide" data-bs-ride="carousel">
    <div class="carousel-inner">
        <div class="carousel-item active">
            <img src="slide1.jpg" class="d-block w-100" alt="Слайд 1">
        </div>
        <div class="carousel-item">
            <img src="slide2.jpg" class="d-block w-100" alt="Слайд 2">
        </div>
    </div>
    <button class="carousel-control-prev" data-bs-target="#carouselExample" data-bs-slide="prev">
        <span class="carousel-control-prev-icon"></span>
    </button>
    <button class="carousel-control-next" data-bs-target="#carouselExample" data-bs-slide="next">
        <span class="carousel-control-next-icon"></span>
    </button>
</div>

5. Как создать свою собственную систему дизайна с помощью Tailwind CSS?

    Используется файл tailwind.config.js, в котором можно кастомизировать цвета, шрифты, размеры и другие стили.

Пример кастомизации в tailwind.config.js:

module.exports = {
  theme: {
    extend: {
      colors: {
        primary: '#1E40AF',
        secondary: '#9333EA',
      },
      fontFamily: {
        sans: ['Inter', 'sans-serif'],
      },
    },
  },
};

Теперь можно использовать кастомные классы:

<button class="bg-primary text-white font-sans px-4 py-2 rounded">
    Кастомная кнопка
</button>

6. Что делает директива @extend, и как она упрощает код?

    @extend позволяет наследовать стили одного селектора другим.
    Это сокращает код и уменьшает дублирование.

Пример:

.btn {
  background-color: #3498db;
  color: white;
  padding: 10px 20px;
  border-radius: 5px;
}

.btn-large {
  @extend .btn;
  font-size: 20px;
}

Результат в CSS:

.btn, .btn-large {
  background-color: #3498db;
  color: white;
  padding: 10px 20px;
  border-radius: 5px;
}

.btn-large {
  font-size: 20px;
}

    В коде btn-large наследует стили .btn, но добавляет свойство font-size.
    Экономит время и уменьшает дублирование кода.

7. Какие значения можно задавать для свойства animation-timing-function?

    animation-timing-function определяет, как изменяется скорость анимации.
    Основные значения:
        linear – скорость остается постоянной.
        ease – начинается медленно, затем ускоряется, потом замедляется.
        ease-in – начинается медленно, затем ускоряется.
        ease-out – начинается быстро, затем замедляется.
        ease-in-out – медленный старт, ускорение в середине и замедление в конце.
        cubic-bezier(x1, y1, x2, y2) – пользовательская кривая ускорения.

Пример:

.box {
  animation: move 2s ease-in-out;
}

Здесь движение начнется и закончится плавно.

8. Как сохранить выбор пользователя между сеансами с помощью localStorage?

const toggleTheme = () => {
  document.body.classList.toggle("dark-mode");
  localStorage.setItem("theme", document.body.classList.contains("dark-mode") ? "dark" : "light");
};

if (localStorage.getItem("theme") === "dark") {
  document.body.classList.add("dark-mode");
}

document.getElementById("theme-button").addEventListener("click", toggleTheme);

    Этот код сохраняет выбор пользователя и применяет его при следующем посещении.

9. Как организовать работу над проектами в Figma?

    Разделять дизайн на фреймы (например, Desktop, Tablet, Mobile).
    Использовать компоненты и стили для унификации элементов.
    Грамотно именовать слои и группы.
    Делать интерактивные прототипы перед передачей в разработку.

10. Какие новые методы массивов появились в ES6?

    forEach() – перебор элементов
    map() – создание нового массива с измененными элементами
    filter() – отбор элементов по условию
    find() – поиск первого подходящего элемента
    reduce() – сведение массива к одному значению

let numbers = [1, 2, 3, 4, 5];
let doubled = numbers.map(num => num * 2); // [2, 4, 6, 8, 10]
let even = numbers.filter(num => num % 2 === 0); // [2, 4]

11. Какие методы работы с массивами можно использовать вместо циклов?

    forEach() – для перебора массива
    map() – для создания нового массива
    filter() – для фильтрации элементов
    reduce() – для объединения значений

let numbers = [1, 2, 3, 4, 5];

numbers.forEach(num => console.log(num)); // 1, 2, 3, 4, 5

let doubled = numbers.map(num => num * 2); // [2, 4, 6, 8, 10]

let even = numbers.filter(num => num % 2 === 0); // [2, 4]

12. Как добавить или удалить элементы в DOM?

    document.createElement("tag") – создание нового элемента.
    parent.appendChild(element) – добавление элемента в родителя.
    parent.removeChild(element) – удаление элемента из родителя.

Пример добавления и удаления элемента:

let newParagraph = document.createElement("p"); // Создаем новый <p>
newParagraph.textContent = "Это новый абзац!";
document.body.appendChild(newParagraph); // Добавляем в <body>

setTimeout(() => {
    document.body.removeChild(newParagraph); // Удаляем через 3 секунды
}, 3000);

13. Что такое всплытие (bubbling) и погружение (capturing) событий в DOM?

    Всплытие (bubbling) – событие сначала срабатывает на вложенном элементе, а затем поднимается вверх по дереву.
    Погружение (capturing) – событие обрабатывается сначала на родительском элементе, затем передается вниз.
    По умолчанию браузер использует всплытие.

Пример:

<div id="parent">
    <button id="child">Нажми меня</button>
</div>

document.getElementById("parent").addEventListener("click", () => {
    console.log("Родитель");
});

document.getElementById("child").addEventListener("click", () => {
    console.log("Дочерний элемент");
});

Результат при клике на кнопку:

Дочерний элемент
Родитель

14. Что означает абстракция в ООП, и как её применять в JS?

    Абстракция — это выделение только ключевых свойств и скрытие деталей реализации.
    В JavaScript можно использовать абстрактные методы (заданные, но не реализованные в базовом классе).

Пример абстракции:

class Shape {
    constructor(name) {
        this.name = name;
    }

    // Абстрактный метод (его нужно переопределять)
    getArea() {
        throw new Error("Метод должен быть переопределён");
    }
}

class Circle extends Shape {
    constructor(radius) {
        super("Круг");
        this.radius = radius;
    }

    getArea() {
        return Math.PI * this.radius ** 2;
    }
}

let circle = new Circle(10);
console.log(circle.getArea()); // 314.159...

15. Как работает async/await и в чем его преимущества перед Promise.then()?

    async делает функцию асинхронной и автоматически возвращает Promise.
    await приостанавливает выполнение функции до завершения асинхронного кода.

Преимущества async/await:
✅ Упрощает работу с асинхронным кодом
✅ Избавляет от вложенности (callback hell)
✅ Позволяет использовать try...catch для обработки ошибок

Пример async/await:

async function fetchData() {
    try {
        let response = await new Promise((resolve) => setTimeout(() => resolve("Данные загружены"), 2000));
        console.log(response);
    } catch (error) {
        console.error("Ошибка:", error);
    }
}

fetchData();

16. Как отправить GET и POST запросы с использованием Fetch API?

Пример GET-запроса:

fetch("https://jsonplaceholder.typicode.com/posts/1")
  .then(response => response.json()) // Преобразуем ответ в JSON
  .then(data => console.log(data))
  .catch(error => console.error("Ошибка:", error));

Пример POST-запроса:

fetch("https://jsonplaceholder.typicode.com/posts", {
    method: "POST",
    headers: {
        "Content-Type": "application/json"
    },
    body: JSON.stringify({ title: "Новый пост", body: "Текст поста" })
})
  .then(response => response.json())
  .then(data => console.log("Создано:", data))
  .catch(error => console.error("Ошибка:", error));

17. Какие существуют коды HTTP-статусов и что они означают?

Коды статусов показывают результат запроса:
Код	Категория	Описание
2xx	Успешные	Запрос выполнен успешно.
200 OK	✅ Успех	Все хорошо, данные получены.
201 Created	✅ Создано	Новый ресурс создан.
204 No Content	✅ Без содержимого	Запрос выполнен, но данных нет.
4xx	Ошибка клиента	Ошибка в запросе со стороны пользователя.
400 Bad Request	❌ Неверный запрос	Неправильный формат данных.
401 Unauthorized	❌ Неавторизован	Нужна аутентификация.
403 Forbidden	❌ Доступ запрещен	У вас нет прав.
404 Not Found	❌ Не найдено	Ресурс не существует.
5xx	Ошибка сервера	Ошибка на стороне сервера.
500 Internal Server Error	❌ Внутренняя ошибка	Сервер не смог обработать запрос.
502 Bad Gateway	❌ Ошибочный шлюз	Проблема между серверами.
503 Service Unavailable	❌ Сервис недоступен	Сервер перегружен.

18. Как создать простой слайдер с анимацией с использованием JavaScript?

Слайдер – это карусель изображений с эффектами.

📌 Простейший слайдер:

<div id="slider">
    <img src="img1.jpg" class="slide active">
    <img src="img2.jpg" class="slide">
    <img src="img3.jpg" class="slide">
</div>
<button id="next">➡️</button>

<style>
  #slider { width: 300px; overflow: hidden; position: relative; }
  .slide { position: absolute; opacity: 0; transition: opacity 0.5s; width: 100%; }
  .slide.active { opacity: 1; }
</style>

<script>
let index = 0;
const slides = document.querySelectorAll(".slide");

document.getElementById("next").addEventListener("click", () => {
    slides[index].classList.remove("active");
    index = (index + 1) % slides.length;
    slides[index].classList.add("active");
});
</script>