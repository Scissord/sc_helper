1. Чем отличается <div> от <span> и в каких случаях их лучше использовать?
  <div> — блочный элемент, занимает всю ширину родительского контейнера, часто используется для группировки других элементов и создания структуры страницы.
  <span> — строчный элемент, используется для выделения части текста или небольших фрагментов внутри других элементов, не создавая новой строки.

2. Как задать цвет, размер и семейство шрифтов для текста с помощью CSS?
p {
    color: blue; /* Цвет текста */
    font-size: 18px; /* Размер шрифта */
    font-family: Arial, sans-serif; /* Семейство шрифтов */
}
Веб-безопасные шрифты — это шрифты, которые поддерживаются на большинстве устройств, например, Arial, Times New Roman, Courier New.

3. В чем разница между grid и flexbox? В каких случаях лучше использовать каждый из них?

    Flexbox — лучше подходит для расположения элементов в строку или колонку (однонаправленная ось).
    Grid — лучше для двумерной сетки, когда нужна структура в строках и колонках одновременно.

Пример использования Grid:

.grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-gap: 10px;
}

4. Как использовать контейнеры в Bootstrap и в чем разница между .container и .container-fluid?

    .container — центрированный контейнер с фиксированной шириной.
    .container-fluid — растягивается на всю ширину экрана.

Пример:

<div class="container">Контейнер с фиксированной шириной</div>
<div class="container-fluid">Контейнер на всю ширину</div>

5. Что означает подход Mobile First в Tailwind CSS и как он реализуется?

    Mobile First означает, что стили по умолчанию применяются для мобильных устройств, а затем расширяются для более широких экранов с помощью медиазапросов.
    В Tailwind CSS это реализуется с помощью префиксов для брейкпоинтов:
        sm: (640px)
        md: (768px)
        lg: (1024px)
        xl: (1280px)
        2xl: (1536px)

Пример адаптивной кнопки:

<button class="bg-blue-500 text-white px-4 py-2 rounded-lg sm:bg-green-500 md:bg-red-500 lg:bg-purple-500">
    Адаптивная кнопка
</button>

    На мобильных (< 640px) кнопка синяя.
    На малых экранах (≥ 640px) — зелёная.
    На средних экранах (≥ 768px) — красная.
    На больших экранах (≥ 1024px) — фиолетовая.

6. Как использовать @mixin и @include в SCSS? Приведите пример.

    @mixin — это шаблон стилей, который можно многократно использовать.
    @include — подключает миксин к нужному элементу.

Пример:

@mixin button-styles($bg-color, $text-color) {
  background-color: $bg-color;
  color: $text-color;
  padding: 10px 20px;
  border-radius: 5px;
}

.btn-primary {
  @include button-styles(#3498db, white);
}

.btn-secondary {
  @include button-styles(#2ecc71, white);
}

Результат в CSS:

.btn-primary {
  background-color: #3498db;
  color: white;
  padding: 10px 20px;
  border-radius: 5px;
}

.btn-secondary {
  background-color: #2ecc71;
  color: white;
  padding: 10px 20px;
  border-radius: 5px;
}

7. Что такое @keyframes, и как с его помощью создавать анимации?

    @keyframes определяет ключевые кадры для анимации.
    Пример:

@keyframes bounce {
  0% { transform: translateY(0); }
  50% { transform: translateY(-50px); }
  100% { transform: translateY(0); }
}

.ball {
  animation: bounce 1s infinite;
}

Объяснение:

    На 0% объект на месте.
    На 50% он поднимается вверх.
    На 100% возвращается обратно.
    infinite делает анимацию бесконечной.

8. Как изменить тему через добавление/удаление классов в HTML с помощью JavaScript?

const toggleTheme = () => {
  document.body.classList.toggle("dark-mode");
};

document.getElementById("theme-button").addEventListener("click", toggleTheme);

    Этот код переключает класс .dark-mode при нажатии кнопки.
    В CSS можно стилизовать .dark-mode, например:

.dark-mode {
  background-color: #121212;
  color: white;
}

9. Какие основные функции и инструменты Figma?

    Векторные инструменты для создания UI-компонентов.
    Фреймы для работы с макетами разных экранов.
    Прототипирование для создания интерактивных макетов.
    Совместная работа в реальном времени.
    Плагины и виджеты для автоматизации рутинных задач.

10. Как создать и работать с массивами в JavaScript?

let arr = [1, 2, 3, 4, 5];
console.log(arr.length); // 5
arr.push(6); // Добавить элемент в конец
arr.pop(); // Удалить последний элемент
arr.shift(); // Удалить первый элемент
arr.unshift(0); // Добавить в начало

11. Как работает цикл for...in и for...of при переборе массива?

    for...in используется для перебора индексов (ключей) объекта или массива.
    for...of используется для перебора значений массива.

let arr = ["apple", "banana", "cherry"];

for (let index in arr) {
    console.log(index); // 0, 1, 2
}

for (let value of arr) {
    console.log(value); // apple, banana, cherry
}

12. Какие методы позволяют изменять содержимое и стили элементов DOM?

    element.innerHTML – изменение HTML внутри элемента.
    element.textContent – изменение текста внутри элемента.
    element.style.property – изменение стилей элемента.
    element.classList.add/remove/toggle – управление классами.

Примеры:

let header = document.querySelector("h1");
header.textContent = "Новый заголовок"; // Изменение текста

let btn = document.querySelector("button");
btn.style.backgroundColor = "blue"; // Изменение цвета кнопки

btn.classList.add("active"); // Добавление класса "active"

13. Что такое WeakMap и WeakSet, и в чем их главное отличие от Map и Set?

    WeakMap и WeakSet хранят только "слабые" ссылки на объекты, что позволяет сборщику мусора автоматически удалять неиспользуемые объекты.
    Они не поддерживают перебор (forEach, for...of и size).

Пример использования WeakMap:

let obj = { name: "Alex" };
let weakMap = new WeakMap();
weakMap.set(obj, "значение");

obj = null; // Теперь объект удалится из памяти

14. Что такое инкапсуляция, и как её реализовать в JavaScript?

    Инкапсуляция означает скрытие внутренних данных объекта и предоставление только нужных методов для взаимодействия.
    В ES6 можно использовать приватные свойства, обозначая их #.

Пример инкапсуляции:

class BankAccount {
    #balance; // Приватное свойство

    constructor(initialBalance) {
        this.#balance = initialBalance;
    }

    deposit(amount) {
        this.#balance += amount;
    }

    getBalance() {
        return this.#balance;
    }
}

let account = new BankAccount(100);
account.deposit(50);
console.log(account.getBalance()); // 150
// console.log(account.#balance); // Ошибка: #balance - приватное

15. Что такое Promises и какие методы у них есть?

Promise (обещание) — объект, который ожидает результат асинхронной операции и возвращает успех или ошибку.

    then() – выполняется, если Promise успешно завершился.
    catch() – выполняется, если произошла ошибка.
    finally() – выполняется в любом случае.

Пример Promise:

let myPromise = new Promise((resolve, reject) => {
    setTimeout(() => {
        let success = true;
        if (success) resolve("Данные получены!");
        else reject("Ошибка загрузки!");
    }, 2000);
});

myPromise
    .then(data => console.log(data)) // "Данные получены!"
    .catch(error => console.error(error))
    .finally(() => console.log("Операция завершена"));

16. Чем отличается Fetch API от Axios, и какие у них преимущества?

Fetch API – встроенный в браузер метод для работы с HTTP-запросами.
Axios – библиотека, предоставляющая удобные методы для запросов.
Сравнение	Fetch API	Axios
Встроен в браузер	✅ Да	❌ Нет (нужно устанавливать)
Поддержка JSON	❌ Нет (нужно response.json())	✅ Да
Автоматическая обработка ошибок	❌ Нет	✅ Да
Поддержка timeout	❌ Нет	✅ Да
Удобство работы с запросами	❌ Нужно больше кода	✅ Короче и удобнее

📌 Когда использовать?

    Fetch API – если нужен базовый функционал.
    Axios – если важна удобная работа с запросами, обработка ошибок и timeout.

17. Что такое JSON и почему он используется в REST API?

JSON (JavaScript Object Notation) – это легкий формат обмена данными, похожий на JavaScript-объекты.

Почему JSON?
✅ Читаемый человеком и машиной.
✅ Легко парсится в JavaScript (JSON.parse() и JSON.stringify()).
✅ Компактнее XML, передает меньше данных.

Пример JSON:

{
  "name": "John",
  "age": 30,
  "isAdmin": false
}

18. Как работает скроллер в JavaScript и какие методы позволяют анимировать прокрутку?

JavaScript позволяет анимировать прокрутку с помощью scrollTo, scrollBy, scrollIntoView и Intersection Observer.

📌 Плавный скролл вниз на 500px:

window.scrollBy({ top: 500, behavior: "smooth" });

📌 Перемещение к элементу:

document.getElementById("target").scrollIntoView({ behavior: "smooth" });

📌 Анимация прокрутки с requestAnimationFrame:

function smoothScroll(targetY, duration) {
    let startY = window.scrollY;
    let startTime = performance.now();

    function scrollStep(time) {
        let progress = (time - startTime) / duration;
        let newY = startY + (targetY - startY) * progress;
        window.scrollTo(0, newY);
        if (progress < 1) requestAnimationFrame(scrollStep);
    }

    requestAnimationFrame(scrollStep);
}

smoothScroll(600, 1000);


19. Как установить и использовать пакет в Node.js с помощью npm?

Чтобы установить и использовать пакет в Node.js, выполните следующие шаги:
1. Инициализация проекта

Если у вас нет package.json, создайте его командой:

npm init -y

2. Установка пакета

    Установить пакет для работы в продакшене (dependencies):

npm install axios

Установить пакет только для разработки (devDependencies):

    npm install eslint --save-dev

3. Использование пакета в коде

Например, использование axios для выполнения HTTP-запроса:

const axios = require("axios");

axios.get("https://api.example.com/data")
  .then(response => console.log(response.data))
  .catch(error => console.error(error));

4. Удаление пакета

Чтобы удалить пакет, используйте:

npm uninstall axios

20. Как использовать Postman для отправки запросов с JWT-токеном?

Postman позволяет отправлять запросы с JWT-токеном для аутентификации.
1. Получение JWT-токена

    Выполните POST-запрос к серверу (например, /login), передав логин и пароль.
    Сервер вернет JWT-токен в ответе.

2. Добавление токена в запрос

    Открываем Postman.
    Выбираем GET (или другой метод).
    Вводим URL запроса (например, https://api.example.com/data).
    Перейдите во вкладку Authorization.
    Выберите Bearer Token и вставьте полученный токен.
    Нажмите Send.

Также можно добавить токен вручную в заголовки:

    Перейдите в Headers.
    Добавьте:

Authorization: Bearer <ваш_токен>

21. Как реализовать условный рендеринг (Conditional Rendering) в React?

Условный рендеринг позволяет отображать разные компоненты в зависимости от условий.
1. Использование if

function UserGreeting({ isLoggedIn }) {
  if (isLoggedIn) {
    return <h1>Добро пожаловать!</h1>;
  }
  return <h1>Пожалуйста, войдите.</h1>;
}

2. Тернарный оператор (? :)

const Message = ({ hasNotifications }) => (
  <p>{hasNotifications ? "У вас есть новые уведомления!" : "Нет новых уведомлений."}</p>
);

3. Логическое && (для короткого рендеринга)

const Notifications = ({ count }) => (
  <div>{count > 0 && <span>У вас {count} новых сообщений</span>}</div>
);

4. Использование switch

function Status({ status }) {
  switch (status) {
    case "loading":
      return <p>Загрузка...</p>;
    case "success":
      return <p>Данные загружены!</p>;
    case "error":
      return <p>Ошибка загрузки.</p>;
    default:
      return <p>Неизвестный статус.</p>;
  }
}

22. Как создать и использовать собственный (custom) React-хук?

Custom Hook – это переиспользуемая логика, созданная на основе стандартных хуков.
Пример: хук useFetch для загрузки данных

import { useState, useEffect } from "react";

function useFetch(url) {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    fetch(url)
      .then(response => response.json())
      .then(data => {
        setData(data);
        setLoading(false);
      })
      .catch(error => {
        setError(error);
        setLoading(false);
      });
  }, [url]);

  return { data, loading, error };
}

export default useFetch;

Использование хука в компоненте

function UserList() {
  const { data, loading, error } = useFetch("https://jsonplaceholder.typicode.com/users");

  if (loading) return <p>Загрузка...</p>;
  if (error) return <p>Ошибка: {error.message}</p>;

  return (
    <ul>
      {data.map(user => (
        <li key={user.id}>{user.name}</li>
      ))}
    </ul>
  );
}

23. Какое назначение у Redux store, reducers и actions?

Redux основан на трех ключевых элементах:
1. Store (Хранилище)

Хранит состояние (state) всего приложения.

import { createStore } from "redux";
import reducer from "./reducer";

const store = createStore(reducer);

2. Reducers (Редьюсеры)

Чистые функции, которые изменяют состояние на основе actions.

const initialState = { count: 0 };

function counterReducer(state = initialState, action) {
  switch (action.type) {
    case "INCREMENT":
      return { count: state.count + 1 };
    case "DECREMENT":
      return { count: state.count - 1 };
    default:
      return state;
  }
}

3. Actions (Действия)

Объекты, описывающие, что нужно сделать.

const increment = { type: "INCREMENT" };
const decrement = { type: "DECREMENT" };

store.dispatch(increment);
store.dispatch(decrement);

Связка между ними:

    store хранит текущее состояние.
    dispatch(action) отправляет действие.
    reducer принимает текущее состояние и действие, возвращая новое состояние.

Эти ответы помогут вам понять основные концепции Node.js, JWT, React и Redux!