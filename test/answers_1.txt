1. Что такое HTML и какую роль он играет в веб-разработке?
  HTML (HyperText Markup Language) — это язык разметки, используемый для создания структуры веб-страниц. Он определяет, какие элементы и блоки будут на странице, такие как заголовки, текст, изображения, кнопки, формы и таблицы. HTML сам по себе не отвечает за стилизацию (CSS) или логику работы (JavaScript), но служит основой для всей веб-страницы.

2. Что такое CSS и зачем он нужен в веб-разработке?
CSS (Cascading Style Sheets) — это каскадные таблицы стилей, используемые для оформления веб-страниц. CSS позволяет изменять цвет, шрифт, расположение и другие визуальные параметры элементов HTML.

3. Какие основные значения может принимать свойство display и в чем их различие?

    block — элемент занимает всю ширину, переносится на новую строку.
    inline — элемент размещается в строке, не переносится на новую строку.
    inline-block — как inline, но поддерживает размеры (width, height).
    flex — включает Flexbox для родительского элемента.
    grid — включает Grid Layout.
    none — скрывает элемент.

Пример:

div { display: flex; }

4. Что такое Bootstrap и какие преимущества он дает в веб-разработке?
Bootstrap — это популярный CSS-фреймворк для создания адаптивных веб-страниц.
Преимущества:

    Готовая адаптивная сетка (Grid system).
    Большое количество предустановленных компонентов (кнопки, формы, модальные окна, карточки и др.).
    Совместимость с современными браузерами.
    Быстрая разработка без необходимости писать много CSS.

5. Что такое Tailwind CSS и чем он отличается от других CSS-фреймворков?
Tailwind CSS — это утилитарный CSS-фреймворк, который предоставляет готовые классы для стилизации без написания пользовательского CSS.
Отличия:

    Utility-first (стилизация с помощью готовых классов, без необходимости писать отдельные CSS-правила).
    Гибкость (не навязывает дизайн, в отличие от Bootstrap или Material UI).
    Минимальный вес (удаляет неиспользуемые стили с помощью PurgeCSS).

6. Что такое SASS/SCSS, и в чем их отличие от обычного CSS?

    SASS (Syntactically Awesome Stylesheets) — это препроцессор CSS, который добавляет переменные, вложенность, миксины и другие полезные возможности.
    SCSS (Sassy CSS) — это один из синтаксисов SASS, похожий на обычный CSS, но с дополнительными возможностями.
    Отличия от обычного CSS:
        Переменные ($primary-color: blue;)
        Вложенные селекторы (.nav { .link { color: red; } })
        Миксины (@mixin) и наследование (@extend)
        Упрощенное управление стилями в крупных проектах

7. Чем отличается transition от animation в CSS?

    transition используется для плавного изменения свойств элемента при наведении (hover), фокусировке (focus) или изменении состояния.
    animation позволяет создавать сложные анимации с разными этапами (@keyframes) без необходимости менять состояния вручную.

Пример transition:

.box {
  width: 100px;
  height: 100px;
  background-color: red;
  transition: background-color 0.5s ease-in-out;
}

.box:hover {
  background-color: blue;
}

Здесь цвет меняется плавно при наведении.

Пример animation:

@keyframes move {
  0% { transform: translateX(0); }
  100% { transform: translateX(200px); }
}

.box {
  animation: move 2s infinite alternate;
}

Здесь блок будет двигаться влево-вправо бесконечно.

8. Какие основные способы реализации Dark Mode в веб-приложениях?

    Использование CSS-медиа-запроса prefers-color-scheme.
    Переключение классов в HTML (.dark-mode).
    Хранение предпочтений пользователя в localStorage.
    Использование CSS-переменных (custom properties) для легкой смены темы.

9. Какие основные принципы современного веб-дизайна?

    Минимализм (простота, отсутствие лишних элементов).
    UI/UX-дизайн (ориентация на удобство пользователя).
    Адаптивность (поддержка разных устройств и экранов).
    Читаемость (грамотная типографика, контрастность).
    Скорость загрузки (оптимизация изображений и кода).

10. Какие типы переменных существуют в JavaScript и в чем их различия?
В JavaScript есть три способа объявления переменных:

    var – устаревший способ, не имеет блочной области видимости.
    let – имеет блочную область видимости и позволяет менять значение.
    const – имеет блочную область видимости и не позволяет менять значение.

var a = 10; // Можно переопределять и использовать до объявления (hoisting)
let b = 20; // Можно изменять, но нельзя использовать до объявления
const c = 30; // Нельзя изменять

11. Как работают условные операторы if/else и switch в JavaScript?

    if/else позволяет выполнять код в зависимости от условия.
    switch используется для сравнения переменной со множеством значений.

let num = 10;

if (num > 5) {
    console.log("Число больше 5");
} else {
    console.log("Число меньше или равно 5");
}

switch (num) {
    case 10:
        console.log("Число 10");
        break;
    case 20:
        console.log("Число 20");
        break;
    default:
        console.log("Неизвестное число");
}

12. Что такое DOM и как он связан с HTML?

    DOM (Document Object Model) – это представление HTML-документа в виде дерева объектов.
    Каждый элемент HTML (например, <div>, <p>, <button>) становится узлом дерева, с которым можно взаимодействовать с помощью JavaScript.

Пример структуры DOM:

<html>
  <body>
    <h1>Привет, мир!</h1>
    <button>Нажми меня</button>
  </body>
</html>

В JavaScript можно получить доступ к <h1> и <button>, изменять их содержимое и стили.

13. Чем Map отличается от Object в JavaScript?

    Map позволяет использовать ключи любого типа (включая объекты и функции), а Object – только строки и Symbol.
    Map хранит ключи в порядке добавления, а Object – нет.
    У Map есть удобные методы (set, get, has, delete, size).

Пример использования Map:

let map = new Map();
map.set("ключ", "значение");
map.set(123, "число");
map.set({ name: "Alex" }, "объект");

console.log(map.get(123)); // "число"
console.log(map.size); // 3

14. Что такое классы в JavaScript и как их использовать?

    Классы — это синтаксический сахар над функциями-конструкторами, используемый для создания объектов.
    Классы определяются с помощью class, а внутри могут быть методы и конструкторы.

Пример класса:

class Person {
    constructor(name, age) {
        this.name = name;
        this.age = age;
    }

    greet() {
        console.log(`Привет, меня зовут ${this.name}`);
    }
}

let user = new Person("Алекс", 25);
user.greet(); // "Привет, меня зовут Алекс"

15. Что такое асинхронность в JavaScript и зачем она нужна?

    JavaScript — однопоточный язык, и без асинхронности код выполнялся бы строго по порядку, ожидая завершения каждого действия (например, запроса на сервер).
    Асинхронность позволяет не блокировать выполнение других операций, пока выполняются долгие задачи.
    В JS асинхронность реализуется с помощью Callbacks, Promises, async/await.

Пример проблемы синхронного кода:

console.log("Начало");
alert("Подтверди действие"); // Блокирует весь код
console.log("Конец"); // Выполнится только после закрытия alert

16. Что такое HTTP, как он работает и какие у него основные методы?

    HTTP (HyperText Transfer Protocol) — протокол для передачи данных между клиентом (браузером) и сервером.
    Работает по принципу запрос-ответ: клиент отправляет запрос, сервер обрабатывает его и возвращает ответ.
    Основные методы HTTP:
        GET – получение данных
        POST – отправка данных
        PUT – обновление данных
        DELETE – удаление данных

Пример GET-запроса:

GET /users HTTP/1.1
Host: api.example.com

Пример ответа:

{
  "id": 1,
  "name": "John Doe"
}

17. Что такое REST API и как оно работает?

REST API (Representational State Transfer Application Programming Interface) — это способ взаимодействия клиентских и серверных приложений через HTTP.

    Основан на ресурсах (например, https://api.example.com/users).
    Использует HTTP-методы (GET, POST, PUT, DELETE).
    Передает данные в JSON или XML (чаще в JSON).
    Не хранит состояние (stateless), каждый запрос независим.

Пример запроса к REST API:

GET /users HTTP/1.1
Host: api.example.com

Пример ответа сервера:

[
  { "id": 1, "name": "Alice" },
  { "id": 2, "name": "Bob" }
]

18. Какие существуют способы создания анимаций в JavaScript?

В JavaScript можно создавать анимации несколькими способами:

✅ CSS-анимации (animation, transition) – простые эффекты без кода JS.
✅ setInterval() и setTimeout() – старый метод, неэффективный.
✅ requestAnimationFrame() – современный способ для плавных анимаций.
✅ SVG-анимации – анимация векторной графики.
✅ Библиотеки (AnimeJS, GSAP, AOS) – удобные инструменты для сложных анимаций.

Пример requestAnimationFrame():

let pos = 0;
function animate() {
    pos += 2;
    document.getElementById("box").style.transform = `translateX(${pos}px)`;
    requestAnimationFrame(animate);
}
animate();